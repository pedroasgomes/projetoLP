%Comandos

:- [codigo_comum].



:- set_prolog_flag(answer_write_options,[max_depth(0)]).

%Projeto

%--------------------------------------------------------------
/*
extrai_ilhas_linha(N_L, Linha, Ilhas), em que N_L eh um inteiro positivo, correspondente ao 
numero de uma linha e Linha eh uma lista correspondente a uma linha de um puzzle, significa 
que Ilhas eh a lista ordenada (ilhas da esquerda para a direita) cujos elementos sao as ilhas
da linha Linha. 
*/

extrai_ilhas_linha(N_L, Linha, Ilhas) :- extrai_ilhas_linha(N_L, Linha, Ilhas, 1).

extrai_ilhas_linha(_,  [], [], _).

extrai_ilhas_linha(N_L, [P|R], Ilhas, Cont) :- 
	P == 0, Cont_R is Cont + 1, extrai_ilhas_linha(N_L, R, Ilhas, Cont_R).

extrai_ilhas_linha(N_L, [P|R], [ilha(P, (N_L, Cont))|Ilhas_R], Cont) :- 
	P \== 0, Cont_R is Cont + 1, extrai_ilhas_linha(N_L, R, Ilhas_R, Cont_R).


%--------------------------------------------------------------
/*
ilhas(Puz, Ilhas), em que Puz eh um puzzle, significa que Ilhas eh a lista ordenada (ilhas da 
esquerda para a direita e de cima para baixo) cujos elementos sao as ilhas de Puz.
*/

ilhas([P|R], Ilhas) :- ilhas([P|R], Ilhas, 0).

ilhas([], [], _).

ilhas([P|R], Ilhas_F, N_L) :- N_L_R is N_L +1, 
	extrai_ilhas_linha(N_L_R, P, Ilhas_P), ilhas(R, Ilhas_R, N_L_R),
	append(Ilhas_P, Ilhas_R, Ilhas_F).


%--------------------------------------------------------------
/*
vizinhas(Ilhas, Ilha, Vizinhas),em que Ilhas eh a lista de ilhas de um puzzle e Ilha eh uma 
dessas ilhas, significa que Vizinhas eh a lista ordenada (ilhas de cima para baixo e da 
esquerda para a direita) cujos elementos sao as ilhas vizinhas de Ilha.
*/

vizinhas(Ilhas, Ilha, Vizinhas) :- 
	findall(Ilha_T, (member(Ilha_T ,Ilhas), vizinhas_aux1(Ilha_T, Ilha)), Vizinhas_2),
	vizinhas_aux_cima(Ilha, Vizinhas_2, Vizinha_Cima), 
	vizinhas_aux_esquerda(Ilha, Vizinhas_2, Vizinha_Esquerda), 
    vizinhas_aux_direita(Ilha, Vizinhas_2, Vizinha_Direita), 
    vizinhas_aux_baixo(Ilha, Vizinhas_2, Vizinha_Baixo),
    append(Vizinha_Cima, Vizinha_Esquerda, Vizinha_C_E), 
    append(Vizinha_C_E, Vizinha_Direita, Vizinha_C_E_D),
    append(Vizinha_C_E_D, Vizinha_Baixo, Vizinhas).

%Encontrar_Ilhas_Com_Mesma_Linha_e_Coluna


vizinhas_aux1(ilha(_, (Linha_T, Coluna_T)), ilha(_, (Linha, Coluna))) :- 
	Linha_T == Linha, Coluna_T \== Coluna.

vizinhas_aux1(ilha(_, (Linha_T, Coluna_T)), ilha(_, (Linha, Coluna))) :- 
	Coluna_T == Coluna, Linha_T \== Linha.


%Encontrar_as_de_Cima


vizinhas_aux_cima(ilha(_, (Linha, Coluna)), Ilhas, Termo_Cima) :- 
    findall(ilha(N, (Linha_T, Coluna_T)), (member(ilha(N, (Linha_T, Coluna_T)),Ilhas), 
    Coluna == Coluna_T, Linha > Linha_T), Ilhas_Cima_Rev),
    reverse(Ilhas_Cima_Rev, Ilhas_Cima), aux_select_vizinhas(Ilhas_Cima,Termo_Cima).


%Encontrar_as_da_Esquerda


vizinhas_aux_esquerda(ilha(_, (Linha, Coluna)), Ilhas, Termo_Esquerda) :- 
    findall(ilha(N, (Linha_T, Coluna_T)), (member(ilha(N, (Linha_T, Coluna_T)),Ilhas), 
    Linha == Linha_T, Coluna > Coluna_T), Ilhas_Esquerda_Rev),
    reverse(Ilhas_Esquerda_Rev, Ilhas_Esquerda), 
    aux_select_vizinhas(Ilhas_Esquerda,Termo_Esquerda).


%Encontrar_as_da_Direita


vizinhas_aux_direita(ilha(_, (Linha, Coluna)), Ilhas, Termo_Direita) :- 
    findall(ilha(N, (Linha_T, Coluna_T)), (member(ilha(N, (Linha_T, Coluna_T)),Ilhas), 
    Linha == Linha_T, Coluna < Coluna_T), Ilhas_Direita),
    aux_select_vizinhas(Ilhas_Direita,Termo_Direita).


%Encontrar_as_de_Baixo


vizinhas_aux_baixo(ilha(_, (Linha, Coluna)), Ilhas, Termo_Baixo) :- 
    findall(ilha(N, (Linha_T, Coluna_T)), (member(ilha(N, (Linha_T, Coluna_T)),Ilhas), 
    Coluna == Coluna_T, Linha < Linha_T), Ilhas_Baixo),
    aux_select_vizinhas(Ilhas_Baixo,Termo_Baixo).


%Seleciona_Primeiro_Termo


aux_select_vizinhas([], []).

aux_select_vizinhas([P|_], [P]).  


%--------------------------------------------------------------
/*
estado(Ilhas, Estado), em que Ilhas eh a lista de ilhas de um puzzle, significa que Estado
eh a lista ordenada cujos elementos sao as entradas referentes a cada uma das ilhas de Ilhas.
*/

estado(Ilhas, Estado) :- estado(Ilhas, Estado, Ilhas).

estado([], [], _).

estado([P|R], [[P, Vizinhas,[]]|R_E], Ilhas_Todas) :- 
	vizinhas(Ilhas_Todas, P, Vizinhas), estado(R, R_E, Ilhas_Todas).
	

%--------------------------------------------------------------
/*
posicoes_entre(Pos1, Pos2, Posicoes), em que Pos1 e Pos 2 sao posicoes, significa que 
Posicoes eh a lista ordenada de posicoes entre Pos1 e Pos2 (excluindo Pos1 e Pos2). 
Se Pos1 e Pos2 nao pertencerem ah mesma linha ou ah mesma coluna, o resultado eh false.
*/

posicoes_entre((L1,C1), (L2,C2), Posicoes) :- L1 == L2, C1 < C2,
	C1_1 is C1 + 1, C2_1 is C2 - 1, 
	findall((L1,C_N),(between(C1_1, C2_1, C_N)),Posicoes).

posicoes_entre((L2,C2), (L1,C1), Posicoes) :- L1 == L2, C1 < C2,
	C1_1 is C1 + 1, C2_1 is C2 - 1, 
	findall((L1,C_N),(between(C1_1, C2_1, C_N)),Posicoes).

posicoes_entre((L1,C1), (L2,C2), Posicoes) :- C1 == C2, L1 < L2,
	L1_1 is L1 + 1, L2_1 is L2 - 1,
	findall((L_N,C1),(between(L1_1, L2_1, L_N)),Posicoes).

posicoes_entre((L2,C2), (L1,C1), Posicoes) :- C1 == C2, L1 < L2,
	L1_1 is L1 + 1, L2_1 is L2 - 1,
	findall((L_N,C1),(between(L1_1, L2_1, L_N)),Posicoes).


%--------------------------------------------------------------
/*
cria_ponte(Pos1, Pos2, Ponte), em que Pos1 e Pos2 sao 2 posicoes, significa que Ponte 
eh uma ponte entre essas 2 posicoes.
*/

cria_ponte((L1,C1), (L2,C2), ponte((L1,C1), (L2,C2))) :- L1 == L2, C1 < C2.

cria_ponte((L1,C1), (L2,C2), ponte((L2,C2), (L1,C1))) :- L1 == L2, C1 > C2.

cria_ponte((L1,C1), (L2,C2), ponte((L1,C1), (L2,C2))) :- C1 == C2, L1 < L2.

cria_ponte((L1,C1), (L2,C2), ponte((L2,C2), (L1,C1))) :- C1 == C2, L1 > L2.


%--------------------------------------------------------------
/*
caminho_livre(Pos1, Pos2, Posicoes, I, Vz), em que Pos1 e Pos2 sao posicoes, Posicoes 
eh a lista ordenada de posicoes entre Pos1 e Pos2, I eh uma ilha, e Vz eh uma das suas 
vizinhas, significa que a adicao da ponte ponte(Pos1, Pos2) nao faz com que I e Vz 
deixem de ser vizinhas.
*/

caminho_livre(Pos1, Pos2, Posicoes1, ilha(_, (PI)), ilha(_, (PV))) :- 
	posicoes_entre(Pos1, Pos2, Posicoes1), posicoes_entre(PI, PV, Posicoes2), 
	intersection(Posicoes1, Posicoes2, []).

caminho_livre(Pos1, Pos2, _, ilha(_, (PI)), ilha(_, (PV))) :- 
	Pos1 == PI, Pos2 == PV.

caminho_livre(Pos1, Pos2, _, ilha(_, (PI)), ilha(_, (PV))) :- 
	Pos1 == PV, Pos2 == PI.


%--------------------------------------------------------------
/*
actualiza_vizinhas_entrada(Pos1, Pos2, Posicoes, Entrada, Nova_Entrada), em que Pos1 e Pos2
sao as posicoes entre as quais ira ser adicionada uma ponte, Posicoes eh a lista ordenada
de posicoes entre Pos1 e Pos2, e Entrada eh uma entrada, significa que Nova_Entrada eh igual 
a Entrada, excepto no que diz respeito ah lista de ilhas vizinhas; esta deve ser actualizada, 
removendo as ilhas que deixaram de ser vizinhas, apos a adicao da ponte.
*/

actualiza_vizinhas_entrada(Pos1, Pos2, Posicoes,[P, Vizinhas,Pontes],[P, Vizinhas_Novas,Pontes]):- 
	posicoes_entre(Pos1, Pos2, Posicoes), 
	findall(Vizinha,(member(Vizinha, Vizinhas),
	caminho_livre(Pos1,Pos2,Posicoes,P,Vizinha)),Vizinhas_Novas).


%--------------------------------------------------------------
/*
actualiza_vizinhas_apos_pontes(Estado, Pos1, Pos2, Novo_estado), em que Estado eh um 
estado, Pos1 e Pos2 sao as posicoes entre as quais foi adicionada uma ponte, significa 
que Novo_estado eh o estado que se obtehm de Estado apos a actualizacao das ilhas vizinhas 
e cada uma das suas entradas.
*/

actualiza_vizinhas_apos_pontes([], _, _, []).

actualiza_vizinhas_apos_pontes([P|R], Pos1, Pos2, [P_N|R_N]) :- 
	posicoes_entre(Pos1, Pos2, Posicoes), 
	actualiza_vizinhas_entrada(Pos1, Pos2, Posicoes, P, P_N), 
	actualiza_vizinhas_apos_pontes(R, Pos1, Pos2, R_N).


%--------------------------------------------------------------
/*
ilhas_terminadas(Estado, Ilhas_term), em que Estado eh um estado, significa que Ilhas_term
eh a lista de ilhas que ja tem todas as pontes associadas, designadas por ilhas terminadas. 
Se a entrada referente a uma ilha for [ilha(N_pontes, Pos), Vizinhas, Pontes], esta ilha 
esta terminada se N_pontes for diferente de 'X' (a razao para esta condicao ficara aparente 
mais ah frente) e o comprimento da lista Pontes for N_pontes .
*/

ilhas_terminadas(Estado, Ilhas_Term) :- 
	findall(ilha(N_pontes, Pos),(member([ilha(N_pontes, Pos), _, Pontes], Estado),
	 (N_pontes \== 'X') ,length(Pontes, N_pontes)),Ilhas_Term).


%--------------------------------------------------------------
/*
tira_ilhas_terminadas_entrada(Ilhas_term, Entrada, Nova_entrada), em que Ilhas_term eh uma 
lista de ilhas terminadas e Entrada eh uma entrada, significa que Nova_entrada eh a entrada 
resultante de remover as ilhas de Ilhas_term, da lista de ilhas vizinhas de entrada.
*/

tira_ilhas_terminadas_entrada(Ilhas_term, [ilha(N_pontes, Pos), Vizinhas, Pontes],
[ilha(N_pontes, Pos), Novas_Vizinhas, Pontes]) :-
	findall(Ilha_Vizinha,(member(Ilha_Vizinha,Vizinhas), 
	\+member(Ilha_Vizinha, Ilhas_term)),Novas_Vizinhas).
	

%--------------------------------------------------------------
/*
tira_ilhas_terminadas(Estado, Ilhas_term, Novo_estado), em que Estado eh um estado e
Ilhas_term eh uma lista de ilhas terminadas, significa que Novo_estado eh o estado 
resultante de aplicar o predicado tira_ilhas_terminadas_entrada a cada uma das
entradas de Estado.
*/

tira_ilhas_terminadas([P|R], Ilhas_term, [P_N]) :- 
	length([P|R], 1), tira_ilhas_terminadas_entrada(Ilhas_term, P, P_N).

tira_ilhas_terminadas([P|R], Ilhas_term, [P_N|R_N]) :-
	tira_ilhas_terminadas_entrada(Ilhas_term, P, P_N), 
	tira_ilhas_terminadas(R, Ilhas_term, R_N).


%--------------------------------------------------------------
/*
marca_ilhas_terminadas_entrada(Ilhas_term, Entrada,
Nova_entrada), em que Ilhas_term eh uma lista de ilhas terminadas e Entrada eh uma entrada,
significa que Nova_entrada eh a entrada obtida de Entrada da seguinte forma: se a ilha de
Entrada pertencer a Ilhas_term, o numero de pontes desta eh substituido por 'X'; em caso
contrario Nova_entrada eh igual a Entrada.
*/

marca_ilhas_terminadas_entrada(Ilhas_term, [ilha(N_pontes, Pos), Vizinhas, Pontes],
[ilha('X', Pos), Vizinhas, Pontes]) :-
	member(ilha(N_pontes, Pos),Ilhas_term). 

marca_ilhas_terminadas_entrada(Ilhas_term, [ilha(N_pontes, Pos), Vizinhas, Pontes], 
[ilha(N_pontes, Pos), Vizinhas, Pontes]) :-
	\+member(ilha(N_pontes, Pos),Ilhas_term). 


%--------------------------------------------------------------
/*
marca_ilhas_terminadas(Estado, Ilhas_term, Novo_estado), em que Estado eh um estado e
Ilhas_term eh uma lista de ilhas termi- nadas, significa que Novo_estado eh o estado 
resultante de aplicar o predicado marca_ilhas_terminadas_entrada a cada uma das 
entradas de Estado.
*/

marca_ilhas_terminadas([P|R], Ilhas_term, [P_N]) :- 
	length([P|R], 1), marca_ilhas_terminadas_entrada(Ilhas_term, P, P_N).

marca_ilhas_terminadas([P|R], Ilhas_term, [P_N|R_N]) :-
	marca_ilhas_terminadas_entrada(Ilhas_term, P, P_N), 
	marca_ilhas_terminadas(R, Ilhas_term, R_N).


%--------------------------------------------------------------
/*
trata_ilhas_terminadas (Estado, Novo_estado), em que Estado eh um estado, significa que
Novo_estado eh o estado resultante de aplicar os predica- dos tira_ilhas_terminadas e
marca_ilhas_terminadas a Estado.
*/

 trata_ilhas_terminadas(Estado, Novo_estado) :-
 	ilhas_terminadas(Estado, Ilhas_term),
	marca_ilhas_terminadas(Estado, Ilhas_term, Estado_AIT),
 	tira_ilhas_terminadas(Estado_AIT, Ilhas_term, Novo_estado).
 	

%--------------------------------------------------------------
/*
junta_pontes(Estado, Num_pontes, Ilha1, Ilha2, Novo_estado), em que Estado eh um estado 
e Ilha1 e Ilha2 sao 2 ilhas, significa que Novo_estado eh o estado que se obtehm de Estado
por adicao de Num_pontes pontes entre Ilha1 e Ilha2 .
*/

junta_pontes(Estado, Num_pontes,ilha(N_pontes1, Pos1),ilha(N_pontes2, Pos2), Novo_estado):-
	cria_ponte(Pos1, Pos2, Ponte), 
	actualiza_vizinhas_apos_pontes(Estado, Pos1, Pos2, Estado_AP), 
	append([ilha(N_pontes1, Pos1)], [ilha(N_pontes2, Pos2)] , Lista_Ilhas),
	maplist(junta_pontes_aux(Lista_Ilhas, Ponte, Num_pontes), Estado_AP, Estado_AIT),
	trata_ilhas_terminadas(Estado_AIT, Novo_estado).
	
junta_pontes_aux(Lista_Ilhas, _, _, [ilha(N_pontes, Pos), Vizinhas, Pontes], 
[ilha(N_pontes, Pos), Vizinhas, Pontes]) :-
	\+member(ilha(N_pontes, Pos), Lista_Ilhas).

junta_pontes_aux(Lista_Ilhas, Ponte, Num_pontes, [ilha(N_pontes, Pos), Vizinhas, Pontes_Antes], 
[ilha(N_pontes, Pos), Vizinhas, Pontes_Depois]) :-
	member(ilha(N_pontes, Pos), Lista_Ilhas), length(Pontes_Novas, Num_pontes), 
	maplist(=(Ponte),Pontes_Novas),append(Pontes_Antes, Pontes_Novas, Pontes_Depois).


%--------------------------------------------------------------

